<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>驰诚股份</title>
      <link href="/2025/09/14/%E8%B4%A2%E6%80%9D%E8%AE%B0/%E5%A4%8D%E7%9B%98/%E4%B8%AA%E8%82%A1/202509/%E9%A9%B0%E8%AF%9A%E8%82%A1%E4%BB%BD/"/>
      <url>/2025/09/14/%E8%B4%A2%E6%80%9D%E8%AE%B0/%E5%A4%8D%E7%9B%98/%E4%B8%AA%E8%82%A1/202509/%E9%A9%B0%E8%AF%9A%E8%82%A1%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 财思记 </category>
          
          <category> 复盘 </category>
          
          <category> 个股 </category>
          
          <category> 202509 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那人那山那狗</title>
      <link href="/2025/02/23/%E8%A1%8C%E6%80%9D%E5%BD%95/%E8%A7%82%E5%BD%B1/%E9%82%A3%E4%BA%BA%E9%82%A3%E5%B1%B1%E9%82%A3%E7%8B%97/"/>
      <url>/2025/02/23/%E8%A1%8C%E6%80%9D%E5%BD%95/%E8%A7%82%E5%BD%B1/%E9%82%A3%E4%BA%BA%E9%82%A3%E5%B1%B1%E9%82%A3%E7%8B%97/</url>
      
        <content type="html"><![CDATA[<h1 id="山岚为笔-邮路作笺——镌刻于青山绿水的散文诗"><a href="#山岚为笔-邮路作笺——镌刻于青山绿水的散文诗" class="headerlink" title="山岚为笔 邮路作笺——镌刻于青山绿水的散文诗"></a>山岚为笔 邮路作笺——镌刻于青山绿水的散文诗</h1><p>80年代初湘西的一座大山中，一个邮差，一条狗，一辈子。</p><hr><h2 id="山是岁月的褶皱，邮路是血脉的延伸"><a href="#山是岁月的褶皱，邮路是血脉的延伸" class="headerlink" title="山是岁月的褶皱，邮路是血脉的延伸"></a><strong>山是岁月的褶皱，邮路是血脉的延伸</strong></h2><p>在霍建起的镜头里，山峦不是风景，而是命运的年轮。蜿蜒的邮路如同大山的掌纹，镌刻着三代人的呼吸——父亲佝偻的脊梁浸透溪水的寒凉，儿子稚嫩的脚印丈量着父辈的孤独，而那条名叫“老二”的黄狗，始终是山路上跳跃的金色光斑。</p><p>刘烨饰演的年轻邮差，背包里装着的不仅是信件，更是人间烟火的重量：盲眼五婆摩挲的“空白家书”，侗族姑娘篝火下翻飞的红裙，村民攥着汇款单时颤抖的指尖……每一封邮戳都是山民的呼吸，每一张信纸都承载着跨越千山万水的思念。</p><hr><h2 id="父与子：沉默的河床下，流淌着滚烫的岩浆"><a href="#父与子：沉默的河床下，流淌着滚烫的岩浆" class="headerlink" title="父与子：沉默的河床下，流淌着滚烫的岩浆"></a><strong>父与子：沉默的河床下，流淌着滚烫的岩浆</strong></h2><p>这对父子像两座静默对峙的山峰，父亲是经年累月被风雨蚀刻的岩石，儿子是初春破土而出的新竹。当儿子提出“搭便车”的现代逻辑，父亲执拗地踩实每一步山路；当流行歌曲的旋律撞上收音机里的老戏，两代人的价值观在晨雾中无声交锋。</p><p>直到儿子背起父亲趟过刺骨溪流，时光的褶皱突然舒展——二十年前父亲驮着孩童穿过市集的剪影，与此刻儿子宽阔的脊背重叠。父亲的泪坠入水中，化作一句古老的谚语：“背得动爹，儿子就长大了。” 这是中国式父子最含蓄的浪漫主义，无需拥抱，一次负重前行的体温交换，便胜过千言万语。</p><hr><h2 id="狗与路：忠诚是无需翻译的古老誓言"><a href="#狗与路：忠诚是无需翻译的古老誓言" class="headerlink" title="狗与路：忠诚是无需翻译的古老誓言"></a><strong>狗与路：忠诚是无需翻译的古老誓言</strong></h2><p>“老二”不是配角，是邮路上流动的图腾。它追赶被山风劫走的信件时，像一道金色闪电劈开命运的阴霾；它叼来柴火为父子驱寒时，又化作一团温暖的隐喻。当它最终选择追随新主人，山道上飘散的不仅是犬吠，更是一曲关于传承的牧歌。</p><p>这条邮路因狗的足迹有了温度：它丈量过父亲的青春，舔舐过儿子的伤痕，最终将见证新时代的步履。正如山民们说的：“狗认路，比人更懂山的心跳。”</p><hr><h2 id="乡土中国：在慢镜头里窥见永恒"><a href="#乡土中国：在慢镜头里窥见永恒" class="headerlink" title="乡土中国：在慢镜头里窥见永恒"></a><strong>乡土中国：在慢镜头里窥见永恒</strong></h2><p>影片是一卷未完成的水墨长卷：晨雾中的吊脚楼宛如悬浮的蜃景，暮色里的稻田翻滚着金色的海浪，篝火映红的脸庞上跳动着古老的歌谣。霍建起用近乎贪婪的镜头，将山民的质朴与土地的丰饶揉进每一帧胶片——盲眼婆婆等待的“假信”比真相更慈悲，侗族姑娘的银饰在月光下化作流动的星河。</p><p>这里没有英雄史诗，只有凡人用一生诠释“责任”二字：它比山更重，却比羽毛更轻。当父亲说“山里人是神仙”时，我们突然读懂：所谓神仙，不过是甘愿被土地羁绊的凡人。</p><hr><h2 id="后记：在速朽的时代，做不褪色的注脚"><a href="#后记：在速朽的时代，做不褪色的注脚" class="headerlink" title="后记：在速朽的时代，做不褪色的注脚"></a><strong>后记：在速朽的时代，做不褪色的注脚</strong></h2><p>当5G信号即将覆盖最后一片山坳，《那山那人那狗》成为一封写给旧时光的情书。它提醒被即时通讯豢养的我们：有些情感需要翻越三座山岗才能抵达，有些承诺必须用双脚丈量方显郑重。</p><p>那条邮路终将隐入尘烟，像无数被时代碾碎的旧物。但电影记住了——记住父亲被溪水浸泡的膝盖，记住儿子第一次喊“爸”时的颤音，记住狗追逐信件的瞬间。这些微小的永恒，让每个观众都成了山的孩子，在钢筋森林里，永远藏着一捧故乡的月光。</p><blockquote><p>「山不会走过来，我们就自己走过去。」当片尾侗族大歌惊起满山白鹭，突然读懂导演藏在邮包夹层里的隐喻：所有抵达都是另一种出发，就像每封贴着邮票的牵挂，本就是为了被投递进时间的熔炉。</p></blockquote><h2 id="取景地探秘：绥宁大园古苗寨的诗意栖居——一部电影与一片土地的共生叙事"><a href="#取景地探秘：绥宁大园古苗寨的诗意栖居——一部电影与一片土地的共生叙事" class="headerlink" title="取景地探秘：绥宁大园古苗寨的诗意栖居——一部电影与一片土地的共生叙事"></a>取景地探秘：绥宁大园古苗寨的诗意栖居——一部电影与一片土地的共生叙事</h2><h3 id="地理坐标：湘西南的“天然氧吧”"><a href="#地理坐标：湘西南的“天然氧吧”" class="headerlink" title="地理坐标：湘西南的“天然氧吧”"></a>地理坐标：湘西南的“天然氧吧”</h3><p>影片主取景地位于湖南省邵阳市绥宁县关峡苗族乡大园古苗寨，这里地处湘西南边陲，森林覆盖率高达76%，被誉为“神奇绿洲”，拥有黄桑国家级自然保护区、大园古苗寨、花园阁国家湿地公园等自然人文景观167。绥宁的山水如诗，侗族、苗族文化交融，村寨依山傍水而建，竹林、梯田与明清古建筑群交织成一幅水墨长卷，完美契合电影对“乡土中国”的视觉想象。</p><hr><h3 id="大园古苗寨：千年文脉的活态博物馆"><a href="#大园古苗寨：千年文脉的活态博物馆" class="headerlink" title="大园古苗寨：千年文脉的活态博物馆"></a>大园古苗寨：千年文脉的活态博物馆</h3><ul><li><p>建筑美学：窨子屋与时空迷宫<br>大园古苗寨始建于宋代，现存100余栋明清古建筑，以“窨子屋”（又称“一颗印”）为代表。这种高墙围合的砖木结构建筑，兼具防御与防火功能，屋顶天井如方印，檐角飞翘如枪戟，彰显苗族先民的智慧与尚武精神。村内巷道阡陌纵横，青石板路被岁月磨得锃亮，刘烨父子与邮路犬的足迹曾多次穿梭于此。</p></li><li><p>文化符号：四知堂与清廉传承<br>寨中家家户户悬挂“四知堂”匾额，源自东汉杨震“天知、地知、你知、我知”的拒金典故，成为杨氏家族清廉家风的象征。电影中盲眼五婆的“假信”情节，暗合了这种以善意谎言守护人性的东方伦理。</p></li></ul><hr><h3 id="电影场景：自然与人文的共舞"><a href="#电影场景：自然与人文的共舞" class="headerlink" title="电影场景：自然与人文的共舞"></a>电影场景：自然与人文的共舞</h3><ol><li><p>晨雾中的邮路起点<br>影片开篇的雾气缭绕村落，取景于大园古苗寨的清晨。吊脚楼隐现于薄雾中，玉带水环绕村前，邮差父子的背影与犬吠声划破寂静，勾勒出山乡生活的静谧底色。</p></li><li><p>侗族婚礼与篝火红裙<br>侗族姑娘在篝火旁翩跹起舞的片段，展现了绥宁少数民族的鲜活风情。银饰叮当、红裙翻飞，与古寨的沧桑建筑形成强烈对比，暗喻新旧时代的碰撞26。</p></li><li><p>父子对话的溪流与山路<br>父子二人涉水过溪、跋涉山径的场景，拍摄于绥宁的原始次生林区。溪水清冽刺骨，山路蜿蜒如命运褶皱，成为代际情感和解的自然隐喻69。</p></li></ol><hr><h3 id="后续影响：从银幕到现实的文旅共振"><a href="#后续影响：从银幕到现实的文旅共振" class="headerlink" title="后续影响：从银幕到现实的文旅共振"></a>后续影响：从银幕到现实的文旅共振</h3><ul><li><p>影视基地的诞生<br>大园古苗寨因电影声名鹊起，被列为国家级影视拍摄基地，《爸爸去哪儿》等综艺也曾到此取景。2015年，刘烨携子重返故地，感叹“山绿如初，老屋如画”。</p></li><li><p>苗族四月八姑娘节<br>每年农历四月初八，绥宁举办国家级非遗节庆“姑娘节”，苗家姑娘身着盛装，以黑饭宴客、草龙舞迎宾，再现电影中淳朴热烈的民俗画卷。</p></li></ul><hr><h3 id="生态与人文的双重遗产"><a href="#生态与人文的双重遗产" class="headerlink" title="生态与人文的双重遗产"></a>生态与人文的双重遗产</h3><p>绥宁不仅是电影的取景地，更是“人与自然共生”的实践范本。这里23.5万亩原始次生林中栖息着全球罕见的铁杉与穗花杉，负氧离子浓度高达每立方厘米15250个，被联合国教科文组织誉为“亚热带最美森林”710。电影中邮差的坚守，恰如这片土地对生态与文化的守护——在速朽的时代，留存一份不褪色的诗意栖居。</p><blockquote><p>“真正的风景不在远方，而在脚下被凝视的土地。”<br>绥宁用它的青山绿水与千年文脉，诠释了何为“电影与土地的共生美学”。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 行思录 </category>
          
          <category> 观影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三月之行</title>
      <link href="/2025/02/15/%E8%A1%8C%E6%80%9D%E5%BD%95/%E6%97%85%E9%80%94/%E6%94%BB%E7%95%A5/%E4%B8%89%E6%9C%88%E4%B9%8B%E8%A1%8C/"/>
      <url>/2025/02/15/%E8%A1%8C%E6%80%9D%E5%BD%95/%E6%97%85%E9%80%94/%E6%94%BB%E7%95%A5/%E4%B8%89%E6%9C%88%E4%B9%8B%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>趁着年假结余，在这燕飞草长的三月，带着父母、带着孩子来一波爱与成长的旅行，计划7~10天。<br>在这里结合DeepSeek,youTube旅游博主等规划如下几条路线。</p><h1 id="西双版纳7天家庭旅行规划（2025年3月下旬）"><a href="#西双版纳7天家庭旅行规划（2025年3月下旬）" class="headerlink" title="西双版纳7天家庭旅行规划（2025年3月下旬）"></a>西双版纳7天家庭旅行规划（2025年3月下旬）</h1><h2 id="行程概览"><a href="#行程概览" class="headerlink" title="行程概览"></a>行程概览</h2><ul><li><strong>天数</strong>：7天6晚</li><li><strong>人数</strong>：中年人（1）、3岁儿童（1）、60+老人（2）</li><li><strong>总预算</strong>：约¥24,500-32,000（含机票）</li><li><strong>特色</strong>：兼顾自然探索、文化体验与亲子互动，行程轻松舒适。</li></ul><hr><h2 id="行程安排"><a href="#行程安排" class="headerlink" title="行程安排"></a>行程安排</h2><h3 id="Day-1：上海-→-西双版纳"><a href="#Day-1：上海-→-西双版纳" class="headerlink" title="Day 1：上海 → 西双版纳"></a><strong>Day 1：上海 → 西双版纳</strong></h3><ul><li><strong>交通</strong>：上海直飞西双版纳（12：45-&gt;17:20海航）</li><li><strong>住宿</strong>：告庄西双景附近四星级酒店（亲子房¥600&#x2F;晚，含早）</li><li><strong>活动</strong>：<ul><li>下午抵达后休整，傍晚逛告庄星光夜市（免费），品尝傣味烧烤、菠萝饭等小吃（餐饮¥150&#x2F;人）</li><li>告庄西双景：正门-万象大道-景洪大金塔-星光夜市-水上市场</li></ul></li></ul><hr><h3 id="Day-2：曼听公园-总佛寺"><a href="#Day-2：曼听公园-总佛寺" class="headerlink" title="Day 2：曼听公园 + 总佛寺"></a><strong>Day 2：曼听公园 + 总佛寺</strong></h3><ul><li><strong>交通</strong>：驾车24分钟</li><li><strong>景点</strong>：<ul><li><strong>中科院热带植物园</strong>（门票¥80&#x2F;人，电瓶车¥50&#x2F;人，儿童免费）</li><li><strong>傣族园</strong>（门票¥65&#x2F;人，含泼水活动）</li></ul></li><li><strong>餐饮</strong>：午餐植物园内简餐（¥40&#x2F;人），晚餐傣族孔雀宴（¥120&#x2F;人）</li><li><strong>住宿</strong>：同Day1</li><li><strong>亮点</strong>：<ul><li>植物园夜观萤火虫（亲子研学项目¥200&#x2F;家庭）</li><li>参与傣族泼水节活动（备换衣物）。</li></ul></li><li><strong>游玩路线</strong><ul><li>曼听公园：周总理铜像-傣王行宫-御花园-御兰园-诚心塔-双塔-鹦鹉表演-白象他表演</li></ul></li></ul><hr><h3 id="Day-2：热带植物园-傣族园"><a href="#Day-2：热带植物园-傣族园" class="headerlink" title="Day 2：热带植物园 + 傣族园"></a><strong>Day 2：热带植物园 + 傣族园</strong></h3><ul><li><strong>交通</strong>：包车（7座商务车¥500&#x2F;天）</li><li><strong>景点</strong>：<ul><li><strong>中科院热带植物园</strong>（门票¥80&#x2F;人，电瓶车¥50&#x2F;人，儿童免费）</li><li><strong>傣族园</strong>（门票¥65&#x2F;人，含泼水活动）</li></ul></li><li><strong>餐饮</strong>：午餐植物园内简餐（¥40&#x2F;人），晚餐傣族孔雀宴（¥120&#x2F;人）</li><li><strong>住宿</strong>：同Day1</li><li><strong>亮点</strong>：<ul><li>植物园夜观萤火虫（亲子研学项目¥200&#x2F;家庭）</li><li>参与傣族泼水节活动（备换衣物）。</li></ul></li></ul><hr><h3 id="Day-3：野象谷-原始森林公园"><a href="#Day-3：野象谷-原始森林公园" class="headerlink" title="Day 3：野象谷 + 原始森林公园"></a><strong>Day 3：野象谷 + 原始森林公园</strong></h3><ul><li><strong>交通</strong>：包车（¥500&#x2F;天）</li><li><strong>景点</strong>：<ul><li><strong>野象谷</strong>（门票¥60&#x2F;人，雨林牧象体验¥198&#x2F;人）</li><li><strong>原始森林公园</strong>（门票¥45&#x2F;人，电瓶车¥60&#x2F;人）</li></ul></li><li><strong>餐饮</strong>：午餐野象谷象餐（¥80&#x2F;人），晚餐酒店附近傣味餐厅（¥100&#x2F;人）</li><li><strong>住宿</strong>：景洪市区五星级酒店（家庭套房¥800&#x2F;晚，含早）:cite[7]</li><li><strong>亮点</strong>：<ul><li>与亚洲象互动，获保育证书（儿童友好）:cite[7]:cite[8]</li><li>观看孔雀放飞表演（免费）:cite[6]。</li></ul></li></ul><hr><h3 id="Day-4：基诺山采茶"><a href="#Day-4：基诺山采茶" class="headerlink" title="**Day 4：基诺山采茶 **"></a>**Day 4：基诺山采茶 **</h3><ul><li><strong>交通</strong>：包车（¥500&#x2F;天）</li><li><strong>景点</strong>：<ul><li><strong>基诺山茶山</strong>（采茶制茶体验¥150&#x2F;人，儿童免费）</li><li><strong>曼听御花园</strong>（门票¥40&#x2F;人，电瓶车¥40&#x2F;人）</li></ul></li><li><strong>餐饮</strong>：午餐基诺族特色餐（¥60&#x2F;人），晚餐景洪夜市小吃（¥80&#x2F;人）</li><li><strong>住宿</strong>：同Day3</li><li><strong>亮点</strong>：<ul><li>亲子共同制作普洱茶饼（可带走纪念）:cite[7]</li><li>曼听公园傣王宫历史讲解（免费）:cite[1]。</li></ul></li></ul><hr><h3 id="Day-5：勐景来中缅边境-温泉康养"><a href="#Day-5：勐景来中缅边境-温泉康养" class="headerlink" title="Day 5：勐景来中缅边境 + 温泉康养"></a><strong>Day 5：勐景来中缅边境 + 温泉康养</strong></h3><ul><li><strong>交通</strong>：包车（¥600&#x2F;天，路程较远）</li><li><strong>景点</strong>：<ul><li><strong>勐景来景区</strong>（门票¥50&#x2F;人，中缅界碑打卡）</li><li><strong>嘎洒凤凰谷温泉</strong>（温泉票¥120&#x2F;人）</li></ul></li><li><strong>餐饮</strong>：午餐边境农家菜（¥50&#x2F;人），晚餐温泉酒店养生餐（¥100&#x2F;人）</li><li><strong>住宿</strong>：温泉度假村（家庭套房¥1,000&#x2F;晚，含早）:cite[1]</li><li><strong>亮点</strong>：<ul><li>体验傣医药泡浴（¥80&#x2F;人）:cite[1]</li><li>老人可享受温泉疗养，儿童有浅水区:cite[1]:cite[7]。</li></ul></li></ul><hr><h3 id="Day-6：雨林轻徒步-非遗体验"><a href="#Day-6：雨林轻徒步-非遗体验" class="headerlink" title="Day 6：雨林轻徒步 + 非遗体验"></a><strong>Day 6：雨林轻徒步 + 非遗体验</strong></h3><ul><li><strong>交通</strong>：包车（¥500&#x2F;天）</li><li><strong>景点</strong>：<ul><li><strong>热带雨林徒步</strong>（向导费¥300&#x2F;家庭，含保险）</li><li><strong>贝叶经制作</strong>（体验¥100&#x2F;人）</li></ul></li><li><strong>餐饮</strong>：雨林野餐（¥60&#x2F;人），晚餐傣族家宴（¥80&#x2F;人）</li><li><strong>住宿</strong>：告庄西双景酒店（¥600&#x2F;晚）</li><li><strong>亮点</strong>：<ul><li>3岁儿童可参与芭蕉取水、水果采摘（安全路线）:cite[3]:cite[8]</li><li>非遗传承人指导贝叶经刻写:cite[1]:cite[4]。</li></ul></li></ul><hr><h3 id="Day-7：自由活动-→-返程"><a href="#Day-7：自由活动-→-返程" class="headerlink" title="Day 7：自由活动 → 返程"></a><strong>Day 7：自由活动 → 返程</strong></h3><ul><li><strong>活动</strong>：<ul><li>上午逛曼掌村（免费，体验慢生活）:cite[7]</li><li>购买特产：普洱茶（¥200-500&#x2F;饼）、热带水果（¥100-200）</li></ul></li><li><strong>交通</strong>：包车送机（¥150）</li><li><strong>餐饮</strong>：午餐告庄网红餐厅（¥100&#x2F;人）</li></ul><hr><h2 id="详细预算（4人合计）"><a href="#详细预算（4人合计）" class="headerlink" title="详细预算（4人合计）"></a>详细预算（4人合计）</h2><table><thead><tr><th>项目</th><th>费用（¥）</th></tr></thead><tbody><tr><td><strong>机票</strong></td><td>12,800</td></tr><tr><td><strong>住宿</strong></td><td>5,400（6晚）</td></tr><tr><td><strong>包车</strong></td><td>3,150</td></tr><tr><td><strong>门票&#x2F;活动</strong></td><td>4,200</td></tr><tr><td><strong>餐饮</strong></td><td>4,200</td></tr><tr><td><strong>其他</strong></td><td>2,000（购物+保险）</td></tr><tr><td><strong>总计</strong></td><td>≈27,750</td></tr></tbody></table><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>儿童友好</strong>：雨林徒步选择轻量级路线，配备安全员:cite[4]:cite[7]。</li><li><strong>老人舒适</strong>：行程中安排温泉、电瓶车代步，避免长时间步行:cite[1]:cite[6]。</li><li><strong>健康准备</strong>：携带防蚊液、防晒霜，老人备常用药品。</li><li><strong>交通建议</strong>：全程包车，减少换乘压力:cite[7]。</li></ol><blockquote><p>以上行程可灵活调整，详细景点介绍及报名可参考：<a href="https://new.qq.com/rain/a/20250217A04OKR00">西双版纳掌上文旅</a>:cite[1]、<a href="http://sh.yuloo.com/xly/news/340701.shtml">上海快亲亲子营</a>:cite[7]。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 行思录 </category>
          
          <category> 旅途 </category>
          
          <category> 攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本</title>
      <link href="/2025/02/15/%E6%8A%80%E6%9C%AF%E6%A0%88/%E6%8A%80%E8%83%BD/Linux/Shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2025/02/15/%E6%8A%80%E6%9C%AF%E6%A0%88/%E6%8A%80%E8%83%BD/Linux/Shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>变量</p><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><ul><li>HOME</li><li>PATH</li></ul><h3 id="申明变量"><a href="#申明变量" class="headerlink" title="申明变量"></a>申明变量</h3><ul><li>变量&#x3D;</li><li>撤销：unset 变量</li><li>申明静态变量：readonly 变量，不能unset</li><li>提升为全局变量，可供其他shell使用：export 变量名</li></ul><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><ul><li>$0：代表该脚本名称</li><li>$1~$9，${10}</li><li>$#：获取参数个数</li><li>$*：代表命令行中所有的参数，会把所有参数看错一个整体</li><li>$@：代表命令行中的所有参数，把每个参数区分对待</li><li>$?：上一个命令的返回值</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>${运算式}或$(())</li><li>expr +,-,\*,&#x2F;,% &#x3D;&#x3D;expr运算符间要有空格&#x3D;&#x3D;<ul><li>expr 3 + 2</li><li>expr <code>expr 2 + 3</code> * 4</li><li>$((2+3)*4)</li></ul></li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>[ condition ] &#x3D;&#x3D;condition前后要有空格&#x3D;&#x3D;</li></ul><ol><li>两个整数之间</li><li>&#x3D; 字符串比较</li><li>-lt</li><li>-le</li><li>-eq</li><li>-gt</li><li>-ge</li><li>-ne</li><li>按照文件权限判断</li><li>-r</li><li>-w</li><li>-x</li><li>按照文件类型进行判断</li><li>-f 文件存在并且是一个常规的文件</li><li>-d 文件存在并且是一个目录</li><li>-e 文件存在</li></ol><p>eg：</p><ul><li><p>[ 23 -ge 22 ]</p></li><li><p>[ -w hello.sh ]</p></li></ul><ol start="4"><li>多条件判断</li><li>[ condition ] &amp;&amp; [ condition ]</li><li>[ condition ] || [condition]</li></ol><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>if [ 条件判断式 ];then<br>    程序<br>fi<br>if [ 条件判断式 ]<br>    then<br>        程序<br>fi<br></code></pre></td></tr></table></figure><h3 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">case $变量名 in<br>&quot;值1&quot;)<br>    程序<br>    ;;;<br>&quot;值2&quot;)<br>    程序<br>    ;;;<br>*)<br>    ;;;<br>esac<br></code></pre></td></tr></table></figure><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>s=0<br>for ((i=1;i&lt;100;i++))<br>do<br>    s=$[$s+$i]<br>done<br>echo $s<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>for i in $*<br>do<br>    echo &quot;$i&quot;<br>done<br></code></pre></td></tr></table></figure><p>“$*”一个整体，“$@‘’、$@、$*一样</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>i=1<br>s=0<br>while [ $i -le 100 ]<br>do<br>    s=$[$s + $i]<br>    i=$[$i + 1]<br>done<br></code></pre></td></tr></table></figure><h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><ul><li>read<ul><li>-p:指定读取时的提示符</li><li>-t:指定读取时的等待时间<ul><li>read -t 7 -p “Enter your name in 7 seconds” NAME</li></ul></li></ul></li></ul><h2 id="执行控制"><a href="#执行控制" class="headerlink" title="执行控制"></a>执行控制</h2><ul><li>set<ul><li>-e：若指令传回值不等于零，则立即退出</li><li>-x：执行指令后，会先显示该指令及所下的参数</li><li>-o pipefail：设置这个选项，包含管道命令的语句的返回值，会变成最后一个返回非零的管道命令的返回值</li></ul></li></ul><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><ul><li>反引号：命令的替换</li><li>双引号：弱引用，可实现变量和命令替换，同$()</li><li>单引号：强引用，不完成变量替换</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul><li>basename [string&#x2F;pathname] [suffix]<ul><li>将pathname或string中的suffix去除，获取文件名称</li></ul></li><li>dirname 文件绝对路径<ul><li>返回路径</li></ul></li></ul><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ function ] funname [())]<br>&#123;<br>    Action;<br>    [return init;]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>函数必须先声明，后使用</li><li>返回值，只能通过$?(0-255)</li></ul><h2 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><ul><li><p>cut [选项参数] filename：从每一行中剪切字符</p><ul><li><p>-f：列号，提取第激烈</p></li><li><p>-d：分隔符，按照分隔符分隔列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -d &quot; &quot; -f 1,2 cut.txt<br>cat cut.txt|grep guan|cut -d &quot; &quot; -f 1<br>echo $PATH|cut -d : -f 3-<br>ifconfig eth0|grep &quot;inet addr&quot;|cut -d : -f 2|cut -d &quot; &quot; -f 1<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>sed是一种流处理器，一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区，模式空间，接着用sed命令处理缓冲区内容，处理完成后，把缓冲区内容送往屏幕。</p><ul><li><p>sed [选项参数] ’command‘ filename</p><ul><li><p>-e：直接在指令列模式上进行sed的动作编辑</p></li><li><p>命令功能</p><ul><li><p>a：新增，在下一行出现</p></li><li><p>d：删除</p></li><li><p>s：查找并替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &quot;2a xxx&quot; sed.txt<br>sed &quot;/wo/d&quot; sed.txt<br>sed &quot;s/wo/ni/g&quot; sed.txt<br>sed -e &quot;2d&quot; -e &quot;s/wo/ni/g&quot; sed.txt<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>  ​ 把文件逐行读入，一空格为默认分隔符将每行切开，切开的部分再进行分析处理。</p></li><li><p>awk [选项参数] ’pattern1{action1} pattern2{action2}…’ filename</p></li><li><p>-F:指定输入文件拆分隔符</p></li><li><p>-v：赋值一个用户定义变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk -F : &#x27;/^root/ &#123;print $7&#125;&#x27; passwd<br>awk -F : &#x27;/^root/ &#123;print $1&quot;,&quot;$7&#125;&#x27; passwd<br>awk -F : &#x27;BEGIN&#123;print &quot;user,shell&quot;&#125; &#123;print $1&quot;,&quot;$7 END&#123;print &quot;end&quot;&#125;&#x27; passwd<br>awk -F : -v i=1 &#x27;print $3+i&#x27; passwd<br></code></pre></td></tr></table></figure></li><li><p>内置变量</p><ul><li>FILENAME：文件名</li><li>NR：已读的记录数</li><li>NF：浏览记录的域的个数（切割后，列的个数）</li></ul></li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul><li><p>sort</p><ul><li><p>-n：按照数值大小</p></li><li><p>-r：倒序</p></li><li><p>-t：设置排序时所用的风格字符</p></li><li><p>-k：指定需要排序的列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort -t : -nrk 2<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>SPARK_HOME&#x3D;”$(cd “<code>dirname &quot;$0&quot;</code>&#x2F;..”; pwd)”</li></ul><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><h1 id="脚本调试技术"><a href="#脚本调试技术" class="headerlink" title="脚本调试技术"></a>脚本调试技术</h1><h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><p>用于捕获指定的信号并执行预定义的命令</p><p>trap ‘command’ signal</p><p>signal是要捕获的信号，command是捕获到信号之后，所要执行的命令。可使用kill -l命令看到系统中全部可用的信号名，捕获信号后所执行的命令可以是任何一条或多条合法的shell语句，也可以是一个函数名</p><p>shell脚本在执行时，会产生三个伪信号，因为这个三个信号是shell产生的，而其他的信号是操作系统产生的</p><table><thead><tr><th>信号名</th><th>何时产生</th></tr></thead><tbody><tr><td>EXIT</td><td>从一个函数中退出或整个脚本执行完毕</td></tr><tr><td>ERR</td><td>当一条命令返回非零状态时（代表命令执行不成功）</td></tr><tr><td>DEBUG</td><td>脚本中每一条命令执行前</td></tr></tbody></table><p>$LINENO为shell内置变量，代表shell脚本的当前行号</p><p>DEBUG可用来对相关变量进行全程跟踪。</p><h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>在shell脚本中管道以及输入输出重定向使用非常多，因为使用管道，中间结果不会打印在屏幕上，给调试带来的困难，可借助tee。</p><p>ipadd&#x3D;&#96;&#x2F;sbin&#x2F;ifconfig |grep ‘inet addr:’ |grep -v ‘127.0.0.1’|tee temp.txt|cut -d : -f3| awk ‘{print $1}’</p><h2 id="使用调试钩子"><a href="#使用调试钩子" class="headerlink" title="使用调试钩子"></a>使用调试钩子</h2><p>在C语言中，常用DEBUG宏来控制是否输出调试信息，shell中可使用这样的机制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [[ &quot;$DEBUG&quot; == &quot;true&quot; ]];then<br>  echo &quot;debugging&quot;<br>fi<br></code></pre></td></tr></table></figure><p>在脚本调试阶段，先执行export DEBUG&#x3D;true命令来打开钩子</p><p>如果在每一处需要输出调试信息的地方用if语句来判断DEBUG变量的值，还是比较繁琐，通过定义一个DEBUG函数可更加简洁</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">DEBUG</span>()&#123;<br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$DEBUG</span>&quot;</span> == <span class="hljs-string">&quot;true&quot;</span> ]];then <br>       <span class="hljs-variable">$@</span><br>  fi<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用shell的执行选项"><a href="#使用shell的执行选项" class="headerlink" title="使用shell的执行选项"></a>使用shell的执行选项</h2><p>-n只读取shell脚本，但不实际执行<br>-x进入跟踪方式，显示执行的每一条命令<br>-c ’strings‘从strings中读取命令</p><p>-x模式：前面有+号的是shell脚本实际执行的命令，前面有++号的行是执行trap机制中指定的命令，其他的行则是输出信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">set -x #开启-x<br>set +x #关闭-x<br>DEBUG set -x<br>DEBUG set +x<br></code></pre></td></tr></table></figure><h2 id="对“-x”选型的增强"><a href="#对“-x”选型的增强" class="headerlink" title="对“-x”选型的增强"></a>对“-x”选型的增强</h2><p>shell内置的环境变量</p><p>$LINENO：代表shell脚本的当前行号，类似于C语言内置宏__LINE__ $FUNCNAME：函数的名字，是个数组变量，包含整个调用链上所有函数的名字，${FUNCNAME[0]}表示shell脚本当前正在执行的函数的名字，而${FUNCNAME[1]}则表示调用函数${FUNCNAME[0]}的函数的名字 $PS4:主提示符变量$PS1和第二级提示符变量$PS2比较常见，而$PS4为第四级提示符变量。$PS4的值将被显示在“-x”选项输出的每一条命令的前面。在Bash Shell，缺省的$PS4是“+”。可以使用内置变量重定义来增强”-x”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PS4=&#x27;&#123;$LINENO:$&#123;FUNCNAME[0]&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 技能 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门</title>
      <link href="/2025/02/15/%E6%8A%80%E6%9C%AF%E6%A0%88/%E6%8A%80%E8%83%BD/Linux/Linux%E5%85%A5%E9%97%A8/"/>
      <url>/2025/02/15/%E6%8A%80%E6%9C%AF%E6%A0%88/%E6%8A%80%E8%83%BD/Linux/Linux%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h2><p>​ 开源、免费的操作系统。</p><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><ul><li>&#x2F;bin：二进制目录，存放许多用户级的GNU工具00</li><li>&#x2F;boot：启动目录</li><li>&#x2F;dev：设备目录，Linux在这里创建设备节点</li><li>&#x2F;etc：系统配置文件目录</li><li>&#x2F;home：主目录，Linux在这里创建设备节点</li><li>&#x2F;lib：库目</li><li>&#x2F;media：媒体目录，可移动媒体设备常用的挂载点</li><li>&#x2F;mnt：挂载目录</li><li>&#x2F;opt：可选目录，用于存放第三方软件包和数据文件</li><li>&#x2F;proc：进程目录，存放现有硬件及当前进程</li><li>&#x2F;root：root用户的主目录</li><li>&#x2F;sbin：系统二进制目录</li><li>&#x2F;run：运行目录，存放系统运行时的运行时数据</li><li>&#x2F;srv：服务目录，存放本地服务相关文件</li><li>&#x2F;sys：系统目录，存放系统硬件信息的相关文件</li><li>&#x2F;tmp：临时文件</li><li>&#x2F;usr：用户二进制文件</li><li>&#x2F;var：可变目录，可存放经常变化的文件，如日志</li></ul><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h3><ul><li>shutdown<ul><li>shutdown -h now：立即关机</li><li>shutdown -h 1:一分钟后关机</li><li>shutdow -r now：立即重启</li></ul></li><li>halt：直接使用，等于关机</li><li>reboot：重启系统</li><li>syn：把内存的数据同步到磁盘</li><li>logout：注销</li></ul><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li>添加用户：useradd [选项] 用户（创建默认组；创建home目录）<ul><li>useradd -d &#x2F;home&#x2F;trigger&#x2F; gemsuser</li></ul></li><li>指定或修改密码：passwd gemsuser</li><li>删除用户：userdel 用户名<ul><li>保留home目录：userdel 用户</li><li>不保留home目录：userdel -r 用户</li></ul></li><li>查询用户信息：id 用户名</li><li>切换用户：su -</li><li>查询用户：whoami</li></ul><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><ul><li>组件组：groupadd 组名</li><li>删除组：groupdel 组名</li><li>增加用户指定组：useradd - g 用户组 用户名</li><li>修改用户组：usermod -g 用户组 用户名</li></ul><h3 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a>用户和组的相关文件</h3><ul><li>&#x2F;etc&#x2F;passwd :用户配置文件（用户信息）</li><li>&#x2F;etc&#x2F;group：组配置文件（组信息），组名 口令 组ID 组内用户列表</li><li>&#x2F;etc&#x2F;shadow：口令配置文件，密码等</li></ul><h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="指定运行界别"><a href="#指定运行界别" class="headerlink" title="指定运行界别"></a>指定运行界别</h3><ul><li>0：关机</li><li>1：单用户（找回丢失密码）</li><li>2：多用户（无网络服务）</li><li>3：多用户（有网络服务）</li><li>4：保留</li><li>5：图形界面</li><li>6：重启</li></ul><p>​ 系统的运行级别配置文件&#x2F;etc&#x2F;inittab</p><p>切换到运行级别的指令：init [0123456]</p><h3 id="如何找回root密码"><a href="#如何找回root密码" class="headerlink" title="如何找回root密码"></a>如何找回root密码</h3><ul><li>进入单用户模式，修改密码</li><li>开机-&gt;引导时输入回车键-&gt;e-&gt;选择第二行（编辑内核）再输入e-&gt;在这行最后输入1-&gt;回车键-&gt;b，进入单用户模式</li></ul><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><p>man [命令或者配置文件] 指令</p><p>help 命令</p><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><ul><li>pwd</li><li>ls：<ul><li>-F,区分文件夹文件,-R递归,-a全部，-l显示长列表,ls -alF</li><li>-l my_script，过滤匹配输出列表</li><li>-l –time&#x3D;atime，才可以显示文件的访问时间，否则默认显示修改时间</li><li>-d只列出目录</li><li>-i查看文件或者目录的inode编号</li></ul></li><li>mkdir -p,递归目录创建</li><li>rmdir：删除空目录</li><li>创建文件：touch filename,也可用于改变修改日期，若想改变访问时间，可加上参数-a</li><li>复制：cp src dst，cp -i覆盖前会提示</li><li>递归复制：cp -r<ul><li>\cp 强制覆盖，不提示覆盖</li></ul></li><li>rm<ul><li>-r：递归真个文件夹</li><li>-f：不提示</li></ul></li><li>mv</li><li>cat file，查看文件，-n行号，-b行数（不包括空行<ul><li>cat -n &#x2F;etc&#x2F;profile |more</li></ul></li><li>cat -T不让制表符出现，一旦开始无法控制后面操作</li><li>more显示文本文件，会在显示每页数据后停下来<ul><li>空格键：向下翻一页</li><li>Enter：一行</li><li>q：退出</li><li>Ctrl+F：向下滚动一屏</li><li>Ctrl+B：向上</li><li>&#x3D;：输出当前的行号</li><li>：f 输出文件名和当前的行号</li><li>！ 调用shell，并执行命令</li></ul></li><li>less，more的升级版（查看大文件）<ul><li>&#x2F;pattern：匹配，n下一个，N前一个</li><li>？pattern</li><li>CTRL+f\b\d\u</li></ul></li><li>查看部分文件tail,默认情况显示文件的末尾10行</li><li>tail -n 2 log_file显示末尾2行，-f参数允许其他进程使用该文件时查看文件类容，hi保持活动状态，并不断显示添加到文件的内容。实时监测系统日志</li><li>head，显示开头，head -5 log_file</li><li>重定向和追加<ul><li>&gt; 覆盖</li><li>&gt;&gt;追加</li></ul></li><li>链接文件：ln -s src dst，软链接<ul><li>删除软连接时&#x3D;&#x3D;不要带斜杠&#x3D;&#x3D;</li></ul></li><li>ln src dst，硬链接，完全一样</li><li>history<ul><li>history 10</li><li>!178</li></ul></li></ul><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><ul><li>date<ul><li>date</li><li>date “+%Y %m %d %H %M %S”</li><li>设置日期：data -s “2020-2-2 22:22:22”</li></ul></li><li>cal：显示日历时间<ul><li>cal</li><li>cal 2020</li></ul></li></ul><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><ul><li>find<ul><li>find &#x2F; -name xxname</li><li>find &#x2F; -user gemsuser</li><li>find &#x2F; -size +20M&#x2F;-10K&#x2F;30G</li></ul></li><li>locate：在第一次运行前，必须使用updatedb指令创建locate数据库，可用于快速定位<ul><li>updatedb</li><li>locate xxxx</li></ul></li><li>grep<ul><li>-n：显示匹配行及行号</li><li>-i：忽略大小写</li></ul></li></ul><h3 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h3><ul><li><p>gzip：压缩后，不保留原文件。gzip xx</p></li><li><p>gunzip</p></li><li><p>zip：zip [选项] xxx.zip 目录</p><ul><li>-r：递归压缩</li></ul></li><li><p>unzip</p><ul><li>-d：解压目的目录</li></ul></li><li><p>tar：tzr -zvbf xx.tar.gz file1 file2</p><ul><li>-c：产生tar打包文件</li><li>-v：显示信息</li><li>-f：指定文件名</li><li>-z：压缩</li><li>-x：解压</li><li>tar -xzvf xx.tar.gz -C &#x2F;opt&#x2F;</li></ul></li><li><p>file能探测文件的内部，知晓文件的类型</p></li><li><p>查看进程ps，默认情况下ps显示运行在当前控制台下的属于当前用户的进程</p><ul><li>n -A，显示所有进程</li><li>n -N，显示与指定参数不符的所有进程</li><li>n -a，显示除控制进程和无终端进程外的所有进程</li><li>n -d，显示除控制进程外的所有进程</li><li>n -e，显示所有进程</li><li>n -C cmdlist，显示包含挂在cmdlist列表中的进程</li><li>n -G grplist，显示组ID在grplist列表中的进程</li><li>n -U userlist，显示属主的用户ID在userlist列表中的进程</li><li>n -l，显示长列表</li><li>n -f，显示完整格式输出</li></ul></li><li><p>ps -ef,ps -l,ps –forest</p></li><li><p>top，实时显示进程</p></li><li><p>kill pid，-s强终止</p></li><li><p>killall 进程名</p></li><li><p>mount 输出当前系统挂载的设备</p></li><li><p>mount –t type directory，type指定了磁盘被格式化的文件系统，该命令需要root权限</p></li><li><p>vfat-Windows长文件系统</p></li><li><p>ntfs-高级文件系统</p></li><li><p>iso9660-标准CD-ROM文件系统</p></li><li><p>mount参数</p><ul><li>ro：以只读形式挂载</li><li>rw：读写</li><li>user：允许普通用户挂载文件系统</li><li>check&#x3D;none：挂载文件系统的时候不进行完整性检查</li><li>loop：挂载一个文件</li></ul></li><li><p>umount：卸载，卸载的时候提示系统可用lsof &#x2F;path&#x2F;device&#x2F;node获取它的进程信息</p></li><li><p>df：可以查询已挂载磁盘的使用情况，-h参数可以按照用户易读的形式显示</p></li><li><p>du：会显示当前目录下所有的文件、目录和子目录的磁盘使用情况</p><ul><li>n -c：显示所有已列出文件总的大小</li><li>n -h：易读</li><li>n -s：显示每个输出参数的总计</li></ul></li><li><p>sort：排序le</p><ul><li>b：排序时候忽略起始的空白</li><li>C：不排序，如果数据无序也不要报告</li><li>c：不排序，但检查输入数据是不是已排序；未排序报告</li><li>d：仅考虑空白和字母，不考虑特殊字符</li><li>f：默认情况下，会将大写字母排在前面；这个参数会忽略大小写</li><li>g：按通用数值来排序，把值当做浮点数</li><li>i：在排序时忽略不可打印字符</li><li>k pos1 pos2：排序从pos1位置开始，如果指定了pos2，到pos2位置结束</li><li>M：按照三字符月份名按月份排序</li><li>m：将两个已排序的数据文件合并</li><li>n：按字符串数值来排序，不转换为浮点数</li><li>o file：将排序结果写出到指定的文件中</li><li>R file：按随机生成的散列表的键值排序</li><li>r：反序排序</li><li>S size：指定使用内存的大小</li><li>s：禁用最后重排序比较</li><li>T dir：指定一个位置来存储临时工作文件</li><li>t sep：指定一个用来区分键位置的字符</li><li>u：和-c参数一起使用，检查严格排序；当不和-c一起使用，仅输出第一例相似的两行</li><li>z：用NULL字符作为行尾，而不是用换行符</li></ul></li><li><p>搜索数据：grep pattern file</p><ul><li>v：方向搜索，输出不匹配该模式的行</li><li>n：显示匹配模式的行所在的行号</li><li>c：只需要知道多少行匹配</li><li>e：若需要制定多个匹配模式，可用-e来制定每个模式：grep –e t –e f file</li></ul></li><li><p>压缩数据</p><ul><li>gzip：压缩文件，.gz</li><li>gzcat：用来查看压缩过的文本文件的内容</li><li>gunzip：用来解压文件</li></ul></li><li><p>归档数据：tar –cvf –tf –xvf(.tar) -xzvf(.tgz)</p><ul><li>A：将一个已有tar归档文件追加到另一个已有tar归档文件</li><li>c：创建一个新的tar归档文件</li><li>d：检查归档文件和文件系统的不用之处</li><li>r：追加文件到已有tar归档文件结尾</li><li>u：将比tar归档文件中已有的同名文件新的文件追加到该tar归档文件中</li><li>x：从已有tar归档文件中提取文件</li><li>C dir：切换到指定目录</li><li>f file：输出结果到文件或设备file</li><li>j：将输出重定向给bzip2命令来压缩内容</li><li>p：保留所有文件权限</li><li>v：在处理文件时显示文件</li><li>z：将输出重定向给gzip命令来压缩内容</li></ul></li><li><p>进程列表：(pwd; ls; cd&#x2F;etc; echo $BASH_SUBSHELL)，若echo命令返回零，则表示没有子shell，若大于零，则表明存在shell。{}这个花括号不会创建子shell而[]会</p></li><li><p>sleep 10&amp;:睡眠10s</p></li><li><p>jobs：显示当前运行在后台的作业 jobs -l还可显示命令的PID</p></li><li><p>后台运行：(tar *)&amp;</p></li><li><p>协程：在后台生成一个shell，并在这个shell中执行命令。coproc My_job { sleep 10; }</p></li></ul><h2 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>​ 文件：所有者、所在组、其他组</p><ul><li>改变文件所有者：chown 用户名 文件名</li><li>组的创建：groupadd 组名</li><li>修改文件所在组：chgrp 组名 文件名</li><li>其他组：排除所有者和所在组</li><li>修改用户所在组：usermod -g 组名 用户名</li><li>修改用户登录目录：usermod -d 目录名 用户名 改变该用户登录的初始目录</li></ul><h3 id="权限基本介绍"><a href="#权限基本介绍" class="headerlink" title="权限基本介绍"></a>权限基本介绍</h3><ul><li>rwx[421]</li></ul><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul><li>chmod：chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x 文件名<ul><li>u、g、o、a（所有）</li><li>chmod 751 文件名</li><li>-R 递归修改</li></ul></li><li>chown<ul><li>chown -R gemsuser &#x2F;</li><li>chown newowner:newgroup file</li></ul></li><li>chgrp</li></ul><h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><ul><li>crond任务调度<ul><li>-e：编辑<ul><li>第几分钟 0~59</li><li>第几小时 0~23</li><li>第几天 1~31</li><li>第几月 1~12</li><li>星期几 0~7（0和7都代表星期日）</li><li>*任何时间</li><li>,不连续时间</li><li>-范围</li><li>*&#x2F;n,每隔多久</li></ul></li><li>-l：显示</li><li>-r：删除</li><li>service crond restart：重启任务调度</li></ul></li></ul><h2 id="磁盘分区挂载"><a href="#磁盘分区挂载" class="headerlink" title="磁盘分区挂载"></a>磁盘分区挂载</h2><h4 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h4><ul><li>mbr</li><li>gtp</li></ul><h4 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h4><ul><li>IDE：hdx hda3-第一个IDE银盘上的第三个分区</li><li>SCSI：sdx</li></ul><p>lsblk -f：查看系统分区和挂载的磁盘</p><h4 id="挂载经典案例"><a href="#挂载经典案例" class="headerlink" title="挂载经典案例"></a>挂载经典案例</h4><ol><li>fdisk &#x2F;dev&#x2F;sdb</li><li>mkfs - t ext4 &#x2F;dev&#x2F;sdb1</li><li>mount &#x2F;dev&#x2F;sdb1 &#x2F;home&#x2F;newdisk（临时挂载）</li><li>永久挂载：vi &#x2F;etc&#x2F;fstab<br>mount -a及时生效</li></ol><h4 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h4><ul><li>df -hl</li><li>du -h &#x2F;目录<ul><li>-a含文件</li><li>–max-depth&#x3D;1子目录深度<ul><li>统计文件个数 ls -l &#x2F;home|grep “^-”|wc -l</li><li>统计目录个数 ls -l &#x2F;home|grep “^d”|wc -l</li><li>统计文件个数包括子目录ls -lR &#x2F;home|grep “^-”|wc -l</li><li>以树状图 tree</li></ul></li></ul></li></ul><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><ul><li>ifconfig</li><li>ping</li><li>指定固定ip：vi &#x2F;etc&#x2F;sysconfig&#x2F;netwok-scripts&#x2F;ifconfig-eth0,static,dns,gateway,onboot&#x3D;yes</li><li>server network restart</li></ul><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><ul><li>hostname</li><li>vim &#x2F;etc&#x2F;sysconfig&#x2F;network:HOSTNAME:yourname</li><li>vim &#x2F;etc&#x2F;hosts</li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h4 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h4><ul><li>ps<ul><li>-a：显示当前终端所有的进程</li><li>-u：以用户的格式显示进程信息</li><li>-x：显示后台进程运行的参数</li><li>-ef：查看父进程</li></ul></li></ul><h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><ul><li>kill<ul><li>-9</li></ul></li><li>killall<ul><li>killall gedit</li></ul></li><li>pstree<ul><li>-p：显示进程的PID</li><li>-u：显示所属的用户</li></ul></li></ul><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><h3 id="管理指令"><a href="#管理指令" class="headerlink" title="管理指令"></a>管理指令</h3><ul><li>service<ul><li>service sshd status</li></ul></li><li>&#x2F;etc&#x2F;init.d：列出系统那些服务</li><li>vi &#x2F;etc&#x2F;inittab：查看或者修改运行级别</li><li>chkconfig：可以给每个服务的各个运行级别的自启动<ul><li>chkconfig –list|grep sshd</li><li>chkconfig –level 5 sshd off</li></ul></li></ul><h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><ul><li>top<ul><li>-d:top -d 10刷新时间</li><li>-i:</li><li>-p:</li><li>u：查看特定用户</li><li>k：进程号，杀进程</li><li>P：cpu排序</li><li>M：按内存排序</li><li>N：pid排序</li></ul></li></ul><h3 id="监看网络情况"><a href="#监看网络情况" class="headerlink" title="监看网络情况"></a>监看网络情况</h3><ul><li>netstat<ul><li>-an：按一定排序排列输出</li><li>-p：显示那个进程在调用</li><li>netstat -anp|more</li><li>netstat -tunlp</li></ul></li></ul><h2 id="RPM和YUM"><a href="#RPM和YUM" class="headerlink" title="RPM和YUM"></a>RPM和YUM</h2><h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><p>readhat package manager</p><ul><li>rpm -qa|grep xx</li><li>rpm -q foxmail</li><li>rpm -qi foxmail</li><li>rpm -ql foxmail：查看安装位置</li><li>rpm -qf &#x2F;etc&#x2F;passwd：查询文件属于哪个包</li><li>rpm -e RPM包名称：卸载</li><li>rpm -e -nodeps：强制删除</li><li>rpm -ivh foxmail<ul><li>-i：install</li><li>-v：verbose提示</li><li>-h：hash进度条</li></ul></li></ul><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul><li>yum list|grep xx</li><li>yum install xx</li></ul><h2 id="内建命令"><a href="#内建命令" class="headerlink" title="内建命令"></a>内建命令</h2><h3 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h3><ul><li>which ps</li><li>type -a ps</li></ul><p>当外部命令执行时，会创建出一个子进程。这种操作成为衍生(forking)</p><h3 id="内建命令-1"><a href="#内建命令-1" class="headerlink" title="内建命令"></a>内建命令</h3><p>​ 不需要子进程来执行，如cd、exit。命令有多种形式，要查看命令的不同实现，使用type命令的-a选项，which只显示外部命令文件</p><ul><li>history：查看历史命令</li><li>！！：会从shell历史记录中换回的命令，然后执行该命令</li><li>history -a：在打开的会话向.bash_history添加记录</li><li>history -n：要强制读取.bah_history文件，可以使用history -n命令</li><li>！n：可用于执行该行指令</li><li>alias -p：查看当前可用别名</li><li>alias li&#x3D;’ls -li’;</li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="全局环境变量"><a href="#全局环境变量" class="headerlink" title="全局环境变量"></a>全局环境变量</h3><ul><li>printenv HOME</li><li>env $HOME</li><li>创建全局变量：my_variable &#x3D; ”I am Global now”; export my_variable</li><li>子shell无法使用export改变父shell中全局变量的值</li></ul><h3 id="局部环境变量"><a href="#局部环境变量" class="headerlink" title="局部环境变量"></a>局部环境变量</h3><ul><li>set：显示特定进程设置的所有环境变量，包括局部变量、全部变量和用户定义变量</li><li>echo $my_variable; my_variable&#x3D;”hello world‘’</li></ul><h3 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h3><ul><li>unset my_variable</li></ul><h3 id="设置PATH环境变量"><a href="#设置PATH环境变量" class="headerlink" title="设置PATH环境变量"></a>设置PATH环境变量</h3><ul><li>PATH&#x3D;$PATH:dir,对PATH的修改只能持续到推出或者重启系统</li></ul><h3 id="永久改变环境变量"><a href="#永久改变环境变量" class="headerlink" title="永久改变环境变量"></a>永久改变环境变量</h3><ul><li>登录shell<ul><li>&#x2F;etc&#x2F;profile</li><li>$HOME&#x2F;.bash_profile</li><li>$HOME&#x2F;.bashrc</li><li>$HOME&#x2F;.bash_login</li><li>$HOME&#x2F;.profile</li><li>$HOME下，shell会按照以上黄色标记顺序执行，运行第一个找到的文件，其余会被忽略</li></ul></li><li>交互式shell：不是登录系统时启动的，检查HOME目录下的.bashrc文件</li><li>非交互式shell：BASH_ENV环境变量</li></ul><h3 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h3><ul><li><p>mytest&#x3D;(ont two three)</p></li><li><p>echo ${mytest[*]}</p></li><li><p><strong>获取数组长度</strong></p><ul><li>arr_length&#x3D;$：返回最后一个变量名</li></ul></li><li><p>$*：将变量当成单个参数</p></li><li><p>$@：会单独处理每个参数</p></li><li><p>shift：左移，$1会丢失，$0不变</p></li><li><p>shift n</p></li><li><p>#：去掉左边</p></li><li><p>%：去掉右</p></li><li><p>单一符号是最小匹配，两个符号是最大匹配</p></li><li><p>${file:0:5}：提取最左边的5个字</p></li><li><p>对变量值的字符串做替换：</p><ul><li>${file&#x2F;dir&#x2F;path}：将一个dir替换为path</li><li>$(file&#x2F;&#x2F;dir&#x2F;pah)：将全部dir替换为path</li><li>${file#<em>&#x2F;}：删掉第一个 &#x2F; 及其左边的字符串</em></li><li><em>${file##</em>&#x2F;}：删掉最后一个 &#x2F; 及其左边的字符串</li><li>${file#<em>.}：删掉第一个 . 及其左边的字符串</em></li><li><em>${file##</em>.}：删掉最后一个 . 及其左边的字符串</li><li>${file%&#x2F;<em>}：删掉最后一个 &#x2F; 及其右边的字符串</em></li><li><em>${file%%&#x2F;</em>}：删掉第一个 &#x2F; 及其右边的字符串</li><li>${file%.<em>}：删掉最后一个 . 及其右边的字符串</em></li><li><em>${file%%.</em>}：删掉第一个 . 及其右边的字符串</li></ul></li><li><p>$$：本身的PID</p></li><li><p>$!：shell运行的最后的后台process的id</p></li><li><p>$*：”$1 $2 …$n”输出所有的参数</p></li><li><p>$@：”$1” … “$n”</p></li><li><p>$#：参数个数</p></li></ul><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h3 id="Segmentation-fault-core-dumped"><a href="#Segmentation-fault-core-dumped" class="headerlink" title="Segmentation fault(core dumped)"></a>Segmentation fault(core dumped)</h3><ul><li>在gcc编译的程序时使用”-g”选项，使编译文件带有调试信息</li><li>检查Linux设置的在发生段错误时文件大小<ul><li>ulimit -a</li></ul></li><li>默认不产生，取消该限制<ul><li>ulimit -c unlimited</li></ul></li><li>用gdb分析core文件</li><li>gdb {executable} {dump file</li><li>bt：查看出错的堆栈(backtrace)</li><li>frame {num}：分析每个栈桢中变量情况</li><li>info locals：查看局部变量</li><li>info args：查看参数</li><li>where：查看调用参数</li></ul><h2 id="Nmon监控工具"><a href="#Nmon监控工具" class="headerlink" title="Nmon监控工具"></a>Nmon监控工具</h2><h3 id="非交互模式"><a href="#非交互模式" class="headerlink" title="非交互模式"></a>非交互模式</h3><ul><li>-f：切换到非交互模式，必须是第一个参数</li><li>-s：每多少秒采集一次数据</li><li>-c：总共采集多少次数</li><li>-t：包括Top进程的状态</li><li>-m：指定生成的文件目录</li></ul><p>可用于生成尾号为.nmon的CSV文件，可使用nmon_analyser把nmon生成的文件转换为excel。</p><p><a href="http://www.ibm.com/developerworks/wikis/display/Wikiptype/nmonanalyser">http://www.ibm.com/developerworks/wikis/display/Wikiptype/nmonanalyser</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 技能 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10X程序员工作法</title>
      <link href="/2025/02/15/%E6%8A%80%E6%9C%AF%E6%A0%88/%E8%81%8C%E5%9C%BA/%E6%96%B9%E6%B3%95%E8%AE%BA/10X%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B7%A5%E4%BD%9C%E6%B3%95/"/>
      <url>/2025/02/15/%E6%8A%80%E6%9C%AF%E6%A0%88/%E8%81%8C%E5%9C%BA/%E6%96%B9%E6%B3%95%E8%AE%BA/10X%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B7%A5%E4%BD%9C%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="开篇词"><a href="#开篇词" class="headerlink" title="开篇词"></a>开篇词</h2><p>软件行业两个概念，本质复杂度（Essential Complexity）和偶然复杂度（Accident Complexity）。<br>大部分程序员忙碌解决的问题，都不是程序问题，而是由偶然复杂度导致的问题。<br>如何减少偶然复杂度引发的问题，让软件开发工作有序、高效地进行，是这个专题讨论的问题。</p><h2 id="01-一个思考框架"><a href="#01-一个思考框架" class="headerlink" title="01 | 一个思考框架"></a>01 | 一个思考框架</h2><p>Where are we?（我们现在在哪？）<br>Where are we going?（我们要到哪儿去？）<br>How can we get there?（我们如何到达那里？）</p><h3 id="四个思考原则"><a href="#四个思考原则" class="headerlink" title="四个思考原则"></a>四个思考原则</h3><p>给出思考框架是为了让你明白为什么要提出问题，而具体问题要怎么问，就可以遵循下面这四项原则：</p><ul><li><p>以终为始，确定好真实目标；</p></li><li><p>任务分解，找到实施路径；</p></li><li><p>沟通反馈，解决与人打交道出现的问题；</p></li><li><p>自动化，解决与机器打交道出现的问题。</p><h2 id="02-以终为始：如何让你的努力不白费？"><a href="#02-以终为始：如何让你的努力不白费？" class="headerlink" title="02 | 以终为始：如何让你的努力不白费？"></a>02 | 以终为始：如何让你的努力不白费？</h2><p>任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental&#x2F;First Creation），然后才是付诸实践，也就是实际的构建或第二次创造（Physical&#x2F;Second Creation）。<br>对做软件的人来说，我们应该把“终”定位成做一个对用户有价值的软件，能够为别人带来价值，自己的价值才能体现出来。<br>践行“以终为始”就是在做事之前，先考虑结果，根据结果来确定要做的事情。</p><h2 id="03-DoD的价值：你完成了工作，为什么他们还不满意？"><a href="#03-DoD的价值：你完成了工作，为什么他们还不满意？" class="headerlink" title="03 | DoD的价值：你完成了工作，为什么他们还不满意？"></a>03 | DoD的价值：你完成了工作，为什么他们还不满意？</h2><h3 id="理解的鸿沟"><a href="#理解的鸿沟" class="headerlink" title="理解的鸿沟"></a>理解的鸿沟</h3><p>双方的理解有差异，那就把这个差异弥合上。弥合差异的方式有很多，有一个最佳实践，它的名字叫 DoD（Definition of Done，完成的定义）。</p><h3 id="完成的定义"><a href="#完成的定义" class="headerlink" title="完成的定义"></a>完成的定义</h3></li><li><p>DoD 是一个清单，清单是由一个个的检查项组成的，用来检查我们的工作完成情况。</p></li><li><p>DoD 的检查项应该是实际可检查的。</p></li><li><p>DoD 是团队成员间彼此汇报的一种机制。当我们有了 DoD，做事只有两种状态，即“做完”和“没做完”。<br>DoD 是一个思维模式，是一种尽可能消除不确定性，达成共识的方式。<br><strong>在做任何事之前，先定义完成的标准。</strong></p><h2 id="04-接到需求任务，你要先做哪件事？"><a href="#04-接到需求任务，你要先做哪件事？" class="headerlink" title="04 | 接到需求任务，你要先做哪件事？"></a>04 | 接到需求任务，你要先做哪件事？</h2><p>需求，是软件开发中的一个关键环节，一旦需求理解出现问题，势必会造成大量的浪费。传统的功能列表只是简单罗列了要实现的功能，丢失了大量的上下文，会导致团队成员对于需求“只见树木不见森林”。</p><h3 id="用”用户故事”描述需求"><a href="#用”用户故事”描述需求" class="headerlink" title="用”用户故事”描述需求"></a>用”用户故事”描述需求</h3></li><li><p>标题，简要地说明这个用户故事的主要内容</p></li><li><p>概述，简要地介绍这个用户故事的主要内容，一般会用这样的格式：<br>As a （Role）, I want to （Activity）, so that （Business Value）.</p></li><li><p>详述，详细地描述这个用户故事的完整流程，我们会把操作流程、用户界面等信息都放到这里。</p></li><li><p>验收标准，这个部分会描述一个正常使用的流程是怎样的，以及各种异常流程系统是如何给出响应的，这是程序员常常会欠缺的思考。它会把详述中很多叙述的部分变成一个具体的测试用例。<br>验收标准非常重要的一环是异常流程的描述。验收标准给出了这个需求最基本的测试用例，它保证了开发人员完成需求最基本的质量。<br><strong>在做任何需求或任务之前，先定好验收标准。</strong></p><h2 id="05-持续集成：集成本身就是写代码的一个环节"><a href="#05-持续集成：集成本身就是写代码的一个环节" class="headerlink" title="05 | 持续集成：集成本身就是写代码的一个环节"></a>05 | 持续集成：集成本身就是写代码的一个环节</h2><p>在很长一段时间内，集成都是软件行业的难题，改动量和集成时间互相影响。<br>每日构建作为早期的一种“最佳实践”被提了出来，但因为它基本上都是原则，没有得到广泛的应用。当人们进一步“调小”参数后，诞生了一个更极致的实践：持续集成，也就是每次提交代码都进行集成。<br><strong>尽早提交代码去集成。</strong></p><h2 id="06-精益创业：产品经理不靠谱，你该怎么办？"><a href="#06-精益创业：产品经理不靠谱，你该怎么办？" class="headerlink" title="06 | 精益创业：产品经理不靠谱，你该怎么办？"></a>06 | 精益创业：产品经理不靠谱，你该怎么办？</h2><p>我们必须要有自己的独立思考，多问几个为什么，尽可能减少掉到“坑”里之后再求救的次数。<br>但是随着互联网深入人心，软件开始向各个领域蔓延。越来越多的人进入到 IT 行业，不同的人开始在各个方向上进行尝试。这时候，软件开发的主流由面向确定性问题，逐渐变成了面向不确定性问题。</p><h3 id="精益创业"><a href="#精益创业" class="headerlink" title="精益创业"></a>精益创业</h3><p>它要解决的是面向不确定性创造新事物。<br>那精益创业到底说的是什么呢？其实很简单。我们不是要面向不确定性创造新事物吗？既然是不确定的，那你唯一能做的事情就是“试”。<br>精益创业的方法论里，提出“开发（build）- 测量（measure）- 认知（learn）”这样一个反馈循环。就是说，当你有了一个新的想法（idea）时，就把想法开发成产品（code）投入市场，然后，收集数据（data）获取反馈。<br>最好的办法就是以最低的成本试，达成同样一个目标，尽可能少做事。精益创业提出一个非常重要的概念，最小可行产品，也就是许多人口中的 MVP（Minimum Viable Product）。简言之，少花钱，多办事。<br>精益创业提供给我们的是一个做产品的思考框架，我们能够接触到的大多数产品都可以放在这个框架内思考。<br><strong>：默认所有需求都不做，直到弄清楚为什么要做这件事。</strong></p><h2 id="07-解决了很多技术问题，为什么你依然在“坑”里？"><a href="#07-解决了很多技术问题，为什么你依然在“坑”里？" class="headerlink" title="07 | 解决了很多技术问题，为什么你依然在“坑”里？"></a>07 | 解决了很多技术问题，为什么你依然在“坑”里？</h2><p>不同角色工作上真正的差异是上下文的不同。<br>虽然写的代码都一样，但你看到的是树木，人家看到的是森林，他更能从全局思考。</p><h3 id="在更大的上下文工作"><a href="#在更大的上下文工作" class="headerlink" title="在更大的上下文工作"></a>在更大的上下文工作</h3><p>扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上。</p><h2 id="08-为什么说做事之前要先进行推演？"><a href="#08-为什么说做事之前要先进行推演？" class="headerlink" title="08 | 为什么说做事之前要先进行推演？"></a>08 | 为什么说做事之前要先进行推演？</h2><p>对比我们的工作，多数情况下，即便目标清晰，路径却是模糊的。所以，不同的人有不同的处理方式。有些人是走到哪算哪，然后再看；有些人则是先推演一下路径，看看能走到什么程度。<br>在军事上，人们将其称为沙盘推演，或沙盘模拟。<br><strong>在动手做一件事之前，先推演一番。</strong></p><h2 id="09-你的工作可以用数字衡量吗？"><a href="#09-你的工作可以用数字衡量吗？" class="headerlink" title="09 | 你的工作可以用数字衡量吗？"></a>09 | 你的工作可以用数字衡量吗？</h2><p>一些人说，自己靠直觉就能把事情做好，其实这是一种误解，因为那种所谓的直觉，通常是一种洞见（Insight），洞见很大程度上依赖于一个人在一个领域长期的沉淀和积累，而这其实是某种意义上的大数据。</p><h3 id="从数字出发"><a href="#从数字出发" class="headerlink" title="从数字出发"></a>从数字出发</h3></li><li><p>重视测量指标，重视数字。</p></li><li><p>基于数字进行技术决策。</p></li><li><p>从数字中发现问题。<br>结合着“以终为始”的思考，如果我们可以在一开始，就设计好测量工作有效性的指标，那么就可以更有目的性地去工作了。<br>而如果我们习惯了用数字去思考，就可以在很多方面让数字帮助我们。我举了几个小例子，比如：基于数据进行技术决策、预先设定系统指标，以及发现系统中的问题等等。希望你也可以把数字思维带到你的日常工作中。<br><strong>问一下自己，我的工作是不是可以用数字衡量。</strong></p><h2 id="10-迭代0-启动开发之前，你应该准备什么？"><a href="#10-迭代0-启动开发之前，你应该准备什么？" class="headerlink" title="10 | 迭代0: 启动开发之前，你应该准备什么？"></a>10 | 迭代0: 启动开发之前，你应该准备什么？</h2><p>一开始就把项目准备好的实践：迭代 0。</p><h3 id="迭代-0-清单"><a href="#迭代-0-清单" class="headerlink" title="迭代 0 清单"></a>迭代 0 清单</h3></li><li><p>需求方面</p><ul><li>细化过的迭代 1 需求</li><li>交互<ul><li>用户界面</li><li>用户交互</li></ul></li></ul></li><li><p>技术方面</p><ul><li>基本<ul><li>技术选型</li><li>技术架构</li></ul></li><li>数据库<ul><li>数据库表结构</li><li>数据库迁移</li></ul></li><li>持续集成<ul><li>持续集成服务器</li><li>持续集成监视器</li><li>构建脚本</li></ul></li><li>测试<ul><li>单元测试和集成测试</li><li>端到端测试</li></ul></li><li>发布<ul><li>发布脚本</li></ul></li></ul></li></ul><p><strong>设计你的迭代 0 清单，给自己的项目做体检。</strong></p><h2 id="答疑解惑-如何管理你的上级？"><a href="#答疑解惑-如何管理你的上级？" class="headerlink" title="答疑解惑 | 如何管理你的上级？"></a>答疑解惑 | 如何管理你的上级？</h2><p>第一，管理上级的预期。相当于我把自己看到的问题暴露给上级，让他选择。<br>第二，帮助上级丰富知识。<br>第三，说出你的想法。</p><h2 id="划重点-关于“以终为始”，你要记住的9句话"><a href="#划重点-关于“以终为始”，你要记住的9句话" class="headerlink" title="划重点 | 关于“以终为始”，你要记住的9句话"></a>划重点 | 关于“以终为始”，你要记住的9句话</h2><p>我们学习到了一些行业最佳实践。</p><ul><li><p>DoD，确定好完成的定义，减少团队内部的理解不一致。</p></li><li><p>用户故事，细化出有价值的需求。</p></li><li><p>持续集成，通过尽早集成，减少改动量，降低集成的难度。</p></li><li><p>精益创业，减少过度开发不确定性产品带来的浪费。</p></li><li><p>迭代 0，在项目开始之前，做好一些基础准备。<br>还学习到一些重要的思维转变。</p></li><li><p>任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental&#x2F;First Creation），然后才是付诸实践，也就是实际的构建或第二次创造（Physical&#x2F;Second Creation）。</p></li><li><p>在更大的上下文内发现自己的“终”。</p></li><li><p>通过推演，找到通往“终”的路径。</p></li><li><p>用可度量的“数字”定义自己的“终”。</p><h2 id="11-向埃隆·马斯克学习任务分解"><a href="#11-向埃隆·马斯克学习任务分解" class="headerlink" title="11 | 向埃隆·马斯克学习任务分解"></a>11 | 向埃隆·马斯克学习任务分解</h2><h3 id="软件开发的任务分解"><a href="#软件开发的任务分解" class="headerlink" title="软件开发的任务分解"></a>软件开发的任务分解</h3><p>一个大问题，我们都很难给出答案，但回答小问题却是我们擅长的。<br>用这种思路解决问题的难点是什么呢？给出一个可执行的分解。<br>如今软件行业都在提倡拥抱变化，而任务分解是我们拥抱变化的前提。<br><strong>动手做一个工作之前，请先对它进行任务分解。</strong></p><h2 id="12-测试也是程序员的事吗？"><a href="#12-测试也是程序员的事吗？" class="headerlink" title="12 | 测试也是程序员的事吗？"></a>12 | 测试也是程序员的事吗？</h2><p>对于每个程序员来说，只有在开发阶段把代码和测试都写好，才有资格说，自己交付的是高质量的代码。<br>越是底层的测试，牵扯到相关内容越少，而高层测试则涉及面更广。<br>小事反馈周期短，而大事反馈周期长。<br>单元测试、集成测试、系统测试等等。越在底层测试，成本越低，执行越快；越在高层测试，成本越高，执行越慢。<br><strong>多写单元测试。</strong></p><h2 id="13-先写测试，就是测试驱动开发吗？"><a href="#13-先写测试，就是测试驱动开发吗？" class="headerlink" title="13 | 先写测试，就是测试驱动开发吗？"></a>13 | 先写测试，就是测试驱动开发吗？</h2><p>测试驱动开发（Test Driven Development）<br>测试驱动开发和测试先行开发只差了一个词：驱动。<br>测试先行开发和测试驱动开发的差异就在重构上。因为重构和测试的互相配合，它会驱动着你把代码写得越来越好。这是对“驱动”一词最粗浅的理解。<br>如果我们把思路反过来，我有一个测试，怎么写代码能通过它。一旦你先思考测试，设计思路就完全变了：我的代码怎么写才是能测试的，也就是说，我们要编写具有可测试性的代码。<br>测试驱动开发的节奏：红——绿——重构。把测试放在前面，还带来了视角的转变，要编写可测的代码，为此，我们甚至需要调整设计，所以，有人也把 TDD 称为测试驱动设计。<br><strong>我们应该编写可测的代码。</strong></p><h2 id="14-大师级程序员的工作秘笈"><a href="#14-大师级程序员的工作秘笈" class="headerlink" title="14 | 大师级程序员的工作秘笈"></a>14 | 大师级程序员的工作秘笈</h2><p>一个经过分解后的任务，需要关注的内容是有限的，我们就可以针对着这个任务，把方方面面的细节想得更加清晰。<br><strong>将任务拆小，越小越好。</strong></p><h2 id="15-一起练习：手把手带你分解任务"><a href="#15-一起练习：手把手带你分解任务" class="headerlink" title="15 | 一起练习：手把手带你分解任务"></a>15 | 一起练习：手把手带你分解任务</h2><p>很多人可能更习惯一个类一个类的写，我要说，最好按照一个需求、一个需求的过程走，这样，任务是可以随时停下来的。<br>检验每个任务项是否拆分到位，就是看你是否知道它应该怎么做了。<br>每做完一个任务，代码都是可以提交的。<br><strong>按照完整实现一个需求的顺序去安排分解出来的任务。</strong></p><h2 id="16-为什么你的测试不够好？"><a href="#16-为什么你的测试不够好？" class="headerlink" title="16 | 为什么你的测试不够好？"></a>16 | 为什么你的测试不够好？</h2><p>主要是因为这些测试不够简单。只有将复杂的测试拆分成简单的测试，测试才有可能做好。</p><h3 id="简单的测试"><a href="#简单的测试" class="headerlink" title="简单的测试"></a>简单的测试</h3><p>把测试写简单，简单到一目了然，不需要证明它的正确性。<br>前置准备、执行、断言和清理</p><h3 id="测试的坏味道"><a href="#测试的坏味道" class="headerlink" title="测试的坏味道"></a>测试的坏味道</h3><p>这个测试一旦出错，就需要把所有相关的几个方法都查看一遍，这无疑是增加了工作的复杂度。<br>测试一定要有断言。</p><h3 id="一段旅程（A-TRIP）"><a href="#一段旅程（A-TRIP）" class="headerlink" title="一段旅程（A-TRIP）"></a>一段旅程（A-TRIP）</h3><p>好的测试标准：</p></li><li><p>Automatic，自动化；</p></li><li><p>Thorough，全面的；</p></li><li><p>Repeatable，可重复的；</p></li><li><p>Independent，独立的；</p></li><li><p>Professional，专业的。<br><strong>要想写好测试，就要写简单的测试。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 职场 </category>
          
          <category> 方法论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
